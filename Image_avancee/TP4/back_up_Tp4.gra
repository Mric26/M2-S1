<Gratin type="pipeline">
 <int name="majorVersion" val="0"/>
 <int name="minorVersion" val="3"/>
 <IOData name="mainWindow">
  <IOData name="graphWidget">
   <IOData name="graph">
    <uint name="nbNodes" val="1"/>
    <string name="nodeStringId-0" val="imgGenericId"/>
    <uint name="nodeVersion-0" val="1"/>
    <string name="nodeName-0" val="genericImage"/>
    <string name="nodePath-0" val="Generic/"/>
    <string name="nodeDesc-0" val="Generic node for image processing"/>
    <string name="nodeHelp-0" val="This node was designed to create custom shaders&#xa;The settings widget allows to modify input, output parameters&#xa;as well as the output image sizes.&#xa;&#xa;WARNING1: you will be able to modify the number of inputs/outputs&#xa;only if the node is entirely disconnected.&#xa;WARNING2: input/output names will not be modified if a custom node is created&#xa;from this node because these names should be edited directly in the setting widget&#xa;WARNING3: modifying the settings of a node will remove all previously&#xa;defined keyframes&#xa;&#xa;* Special data allows to modify the output image (using a multiple of&#xa;the input size, plus an offset vector&#xa;Check use mouse/keyboard if you want to interact with the mouse&#xa;&#xa;* Input data allows to add/remove/displace input data (only if disconnected)&#xa;&#xa;* Output data allows to add/remove/displace output data (only if disconnected)&#xa;&#xa;* Param data allows to add/remove parameters that will automatically be &#xa;included in your shader.&#xa;For each of them you may choose a proper name, type, and min/max/default values.&#xa;Check keyframes if you want your parameter to be accessible&#xa; through the animation widget&#xa;&#xa;In the node interface itself:&#xa;Source tab contains the head and body of your GLSL source (only the body is editable)&#xa;Params tab contains the defined widgets according to your setting choices&#xa;Log tab contains compilation errors&#xa;&#xa;Once your settings and source completed, click on apply to see the result&#xa;"/>
    <uint name="nodeId-0" val="0"/>
    <uint name="nodeGraphId-0" val="0"/>
    <vector2f name="nodePos-0">
     <float name="0" val="-1.8944"/>
     <float name="1" val="-240.139"/>
    </vector2f>
    <int name="nodeInputNameSize-0" val="0"/>
    <int name="nodeOutputNameSize-0" val="1"/>
    <string name="nodeOutputName-0-0" val="outBuffer0"/>
    <bool name="nodeHasWidget-0" val="1"/>
    <IOData name="node-0">
     <string name="genericGlslVersion" val="420"/>
     <string name="genericNodeName" val="genericImage"/>
     <bool name="genericUseVertex" val="0"/>
     <bool name="genericUseTesselation" val="0"/>
     <bool name="genericUseGeometry" val="0"/>
     <bool name="genericUseFragment" val="1"/>
     <int name="genericOutFilter" val="9729"/>
     <int name="genericOutWrap" val="33071"/>
     <bool name="genericUseDepthTest" val="0"/>
     <bool name="genericUseBlending" val="0"/>
     <uint name="genericDepthFunc" val="513"/>
     <uint name="genericBlendSrc" val="1"/>
     <uint name="genericBlendDst" val="0"/>
     <vector4f name="genericBackground">
      <float name="0" val="0"/>
      <float name="1" val="0.694118"/>
      <float name="2" val="0.980392"/>
      <float name="3" val="0"/>
     </vector4f>
     <string name="genericVertHead" val="#version 420&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform vec2 mouse;&#xa;uniform float module;&#xa;uniform float azimut;&#xa;uniform float elevation;&#xa;uniform float xLight;&#xa;uniform float yLight;&#xa;uniform float zLight;&#xa;"/>
     <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
     <string name="genericFragHead" val="#version 420&#xa;&#xa;layout(location = 0) out vec4 outBuffer0;&#xa;uniform vec2 mouse;&#xa;uniform float module;&#xa;uniform float azimut;&#xa;uniform float elevation;&#xa;uniform float xLight;&#xa;uniform float yLight;&#xa;uniform float zLight;&#xa;"/>
     <string name="genericFragBody" val="precision highp float;&#xa;&#xa;#define PI 3.1415926535897932384626433832795&#xa;&#xa;in vec2 texcoord;&#xa;&#xa;// Parametres de la lumiere&#xa;vec3 posLight = vec3(xLight, yLight, zLight);&#xa;&#xa;vec3 backColor = vec3(0.15,0.15,0.15);&#xa;int nb_iter_max = 500;&#xa;float dt = 0.1;&#xa;float d_min = 0.0;&#xa;float d_max = 50;&#xa;float epsi = 0.05;&#xa;&#xa;&#xa;struct Base3D{&#xa;&#x9;vec3 right;&#xa;&#x9;vec3 up;&#xa;&#x9;vec3 view;&#xa;};&#xa;&#xa;struct Cam{&#xa;&#x9;vec3 ro; &#x9;&#x9;&#x9;//origine&#xa;&#x9;Base3D base;&#xa;&#x9;float angle;&#x9;&#x9;//angle d'ouverture&#xa;&#x9;float ratio;&#x9;&#x9;//ration long/larg&#xa;};&#xa;&#xa;struct Ray{&#xa;&#x9;vec3 ro;&#x9;&#x9;//point origine&#xa;&#x9;vec3 rd;&#x9;&#x9;//vecteur directionnel&#xa;};&#xa;&#xa;&#xa;//// Objet 3D ////&#xa;struct Plan{&#xa;&#x9;vec3 n; &#x9;&#x9;&#x9;//normal&#xa;&#x9;float d; &#x9;&#x9;&#x9;//offset&#xa;&#x9;vec3 color; &#x9;&#x9;//couleur&#xa;};&#xa;&#xa;struct Sphere{&#xa;&#x9;vec3 ro; &#x9;&#x9;&#x9;//origine&#xa;&#x9;float ra; &#x9;&#x9;&#x9;//rayon&#xa;&#x9;vec3 color;&#x9;&#x9;//couleur&#xa;};&#xa;&#xa;struct Torus{&#xa;&#x9;vec3 ro;&#xa;&#x9;float R;&#xa;&#x9;float r;&#xa;};&#xa;&#xa;struct Capsule{&#xa;&#x9;vec3 a;&#xa;&#x9;vec3 b;&#xa;&#x9;float r;&#xa;};&#xa;&#xa;&#xa;//// Implicit Fonction ////&#xa;float implicitPlan( vec3 p, Plan plan ){&#xa;&#x9;return dot(p,plan.n) + plan.d;&#xa;}&#xa;&#xa;float implicitSphere( vec3 p, Sphere s ){&#xa; &#x9;return length(p-s.ro) - s.ra;&#xa;}&#xa;&#xa;float implicitTorus( vec3 p, Torus t ){&#xa;&#x9;vec2 q = vec2( length(p.xz - t.ro.xz) - t.R, p.y - t.ro.y );&#xa;&#x9;return length(q) - t.r;&#xa;}&#xa;&#xa;float implicitCapsule( vec3 p, Capsule c ){&#xa;&#x9;vec3 pa = p - c.a;&#xa;&#x9;vec3 ba = c.b - c.a;&#xa;&#x9;float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );&#xa;&#x9;return length( pa - ba*h ) - c.r;&#xa;}&#xa;&#xa;&#xa;//// Operateur ////&#xa;float opUnion(float d1, float d2) {&#xa;&#x9;return min( d1, d2 );&#xa;}&#xa;&#xa;float opIntersection(float d1, float d2) {&#xa;&#x9;return max(d1, d2);&#xa;}&#xa;&#xa;float opSoustraction(float d1, float d2) {&#xa;&#x9;return max(d1, -d2);&#xa;}&#xa;&#xa;float opBlend( float d1, float d2, float k ){&#xa;    float res = exp( -k*d1 ) + exp( -k*d2 );&#xa;    return -log( res )/k;&#xa;}&#xa;&#xa;mat3 rotationZ(float radian){&#xa;&#x9;return mat3(&#xa;   &#x9;&#x9; cos(radian), sin(radian), 0.0, &#x9;// first column (not row!)&#xa;   &#x9;&#x9;-sin(radian), cos(radian), 0.0, &#x9;// second column&#xa;   &#x9;&#x9;0.0, 0.0, 1.0  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// third column&#xa;&#x9;);&#xa;}&#xa;&#xa;mat3 scale( float sx, float sy, float sz ){&#xa;&#x9;return mat3(&#xa;&#x9;&#x9;sx, 0.0, 0.0, // first column (not row!)&#xa;&#x9;&#x9;0.0, sy, 0.0, // second column&#xa;&#x9;&#x9;0.0, 0.0, sz  // third column&#xa;&#x9;);&#xa;}&#xa;&#xa;//// Fonction de distance de la scene ////&#xa;float distanceField( vec3 pos ) {&#xa;&#x9;Plan p = Plan( vec3(0,0,1), 0, vec3(1,0,0) );&#xa;&#x9;Sphere s = Sphere(vec3(0,0,1), 1, vec3(1,0,1));&#xa;&#x9;Torus tore = Torus(vec3(0, 0, 0), 1.5, 0.5);&#xa;&#xa;&#x9;// Scene initiale, Plan + Sphere&#xa;&#x9;float res;&#xa;&#x9;res = implicitPlan( pos, p );&#xa;&#x9;res = opUnion( res, implicitSphere(pos, s));&#xa;&#xa;&#x9;// Calcul de l'angle de rotation (a faire avant le modulo !)&#xa;&#x9;float radian = acos( pos.x / length(vec2(pos.x, pos.y)) );&#xa;&#x9;if (pos.y &lt; 0) {&#xa;&#x9;&#x9;radian *= -1;&#xa;&#x9;}&#xa;&#xa;&#x9;// Modulo sur les coordonnees&#xa;&#x9;pos.x = mod(pos.x, 6) - 3;&#xa;&#x9;pos.y = mod(pos.y, 6) - 3;&#xa;//&#x9;pos.z = pos.z/10;&#xa;&#xa;&#x9;// Rotation sur l'axe z + scale en x et y&#xa;&#x9;mat3 r = rotationZ( radian );&#xa;&#x9;mat3 sc = scale(1, 1, 1);&#xa;&#x9;//mat3 sc = scale(1, 1, length(vec2(pos.x, pos.y)));&#xa;&#x9;pos =  sc * inverse(r)  * pos;&#xa;&#xa;&#x9;// Ajout du Tore a la scene&#xa;&#x9;res = opBlend( res, implicitTorus(pos, tore), 4 );&#xa;&#x9;return res;&#xa;}&#xa;&#xa;// Recherche d'une intersection de la source du rayon jusqu'a une distance max&#xa;float computeIntersection( Ray ray, float distMax ){&#xa;&#x9;float t = 0;&#xa;&#x9;float ft, ft_old;&#xa;&#x9;while (t &lt; distMax) {&#xa;&#x9;&#x9;vec3 pos = ray.ro + (t * ray.rd);&#xa;&#x9;&#x9;ft = distanceField( pos );&#xa;&#x9;&#x9;if (ft &lt; 0) {&#xa;&#x9;&#x9;&#x9;if (t == 0) {&#x9;// Cas limite ou la source du rayon est a l'interieur du champ&#xa;&#x9;&#x9;&#x9;&#x9;return 0.0;&#xa;&#x9;&#x9;&#x9;}&#xa;&#x9;&#x9;&#x9;return t - dt;&#xa;&#x9;&#x9;&#x9;// Recherche d'une solution positive sur y = ax + b&#xa;&#x9;&#x9;&#x9;//do {&#xa;&#x9;&#x9;&#x9;//&#x9;t -= dt / 10.0;&#x9;// Approximation numerique source d'erreur ?&#xa;&#x9;&#x9;&#x9;//&#x9;pos = ray.ro + (t * ray.rd);&#xa;&#x9;&#x9;&#x9;//} while ( distanceField( pos ) &lt; 0);&#xa;&#x9;&#x9;&#x9;//return t;&#xa;&#x9;&#x9;}&#xa;&#x9;&#x9;t += dt;&#xa;&#x9;&#x9;ft_old = ft;&#xa;&#x9;}&#xa;&#x9;// On retourne -1 si le champ n'a pas été intersecté&#xa;&#x9;return -1;&#xa;}&#xa;&#xa;// Calcul du coefficient d'ombre (methode d'iquilezles)&#xa;float softShadow( Ray ray, float distMax, float k ){&#xa;&#x9;float t = 0;&#xa;&#x9;float res = 1.0;&#xa;&#x9;while (t &lt; distMax) {&#xa;&#x9;&#x9;vec3 pos = ray.ro + (t * ray.rd);&#xa;&#x9;&#x9;float ft = distanceField( pos );&#xa;&#x9;&#x9;if (ft &lt;= 0) {&#xa;&#x9;&#x9;&#x9;return 0.0;&#x9;// On retourne 0 si un objet est intersecté&#xa;&#x9;&#x9;}&#xa;&#x9;&#x9;res = min( res, k * ft/t );&#xa;&#x9;&#x9;t += dt;&#xa;&#x9;}&#xa;&#x9;// On retourne la distance minimale entre le rayon et le champ scalaire&#xa;&#x9;return res;&#xa;}&#xa;&#xa;// Calcul de la normale&#xa;vec3 computeNormale( vec3 pos ){&#xa;&#x9;float dx = distanceField( vec3(pos.x+epsi, pos.y, pos.z) ) - distanceField( vec3(pos.x-epsi, pos.y, pos.z) );&#xa;&#x9;float dy = distanceField( vec3(pos.x, pos.y+epsi, pos.z) ) - distanceField( vec3(pos.x, pos.y-epsi, pos.z) );&#xa;&#x9;float dz = distanceField( vec3(pos.x, pos.y, pos.z+epsi) ) - distanceField( vec3(pos.x, pos.y, pos.z-epsi) );&#xa;&#x9;return normalize( vec3(dx, dy, dz) );&#xa;}&#xa;&#xa;&#xa;// Rendu de profondeur&#xa;vec3 renderDepth(  float t  ) {&#xa;&#x9;return vec3(t/d_max, t/d_max, t/d_max);&#xa;}&#xa;&#xa;// Rendu des normales&#xa;vec3 renderNormale( vec3 pos ) {&#xa;&#x9;return computeNormale( pos );&#xa;}&#xa;&#xa;// Rendu avec lumiere et ombres&#xa;vec3 renderShadow( vec3 pos ) {&#xa;&#x9;vec3 normale = computeNormale( pos );&#xa;&#xa;&#x9;// Caclcul du coefficient de l'ombre&#xa;&#x9;vec3 shadowDir = normalize( vec3(posLight - pos) );&#xa;&#x9;Ray shadowRay = Ray( pos+shadowDir/4, shadowDir );&#xa;&#x9;float shadowCoef = softShadow( shadowRay, length(posLight - pos), 8 );&#xa;&#xa;&#x9;// Calcul de l'eclairement&#xa;&#x9;vec3 dirLight = normalize( vec3(pos - posLight) );&#xa;&#x9;float intensity = - (min( 0, dot( normale, dirLight ) ) - 0.20 );&#xa;&#xa;&#x9;// rendu final de la lumiere&#xa;&#x9;return shadowCoef * (intensity * normale);&#xa;}&#xa;&#xa;vec3 BRDF( vec3 l, vec3 v, vec3 n ){&#xa;&#x9;vec3 f0 = vec3(1,1,1); &#xa;&#x9;vec3 h = normalize( l + v );&#xa;&#x9;vec3 m = h / 2;&#xa;&#x9;float alpha = 1;&#xa;&#x9;//lumière diffuse&#xa;&#x9;vec3 diff = vec3(0,0,1) / PI;&#xa;&#x9;//lumière speculaire&#xa;&#x9;vec3 Fresnel = f0 + (1 - f0) * pow( 1 - dot(l, h), 5 );&#xa;&#x9;float GImplicit = dot( n, l ) * dot( n, v );&#xa;&#x9;float D = ( (alpha + 2) / (2 * PI) ) * pow( dot( n, m ), alpha ) ;&#xa;&#x9;vec3 spec = (Fresnel * GImplicit * D) / (4 * GImplicit)  ;&#xa;&#x9;//resultat&#xa;&#x9;return diff + spec;&#xa;}&#xa;&#xa;vec3 directIllumination( vec3 pos, Cam c ){&#xa;&#x9;// Calcul de la BRDF&#xa;&#x9;vec3 normale = computeNormale( pos );&#xa;&#x9;/*if ( distanceField(pos) &lt; 0) {&#xa;&#x9;&#x9;return vec3(1,0,0);&#xa;&#x9;}*/&#xa;&#x9;vec3 dirLight = normalize( vec3(posLight - pos) );&#xa;&#x9;vec3 BRDF = BRDF( dirLight, normalize(c.ro - pos), normale );&#xa;&#x9;float k = dot(normale, dirLight);&#xa;&#x9;if( k &lt; 0 ){&#xa;&#x9;&#x9;k = 0;&#xa;&#x9;}&#xa;&#x9;// Equation de la reflectance&#xa;&#x9;vec3 res = PI * BRDF * k;&#xa;&#x9;// Caclcul du coefficient de l'ombre&#xa;&#x9;vec3 shadowDir = normalize( vec3(posLight - pos) );&#xa;&#x9;Ray shadowRay = Ray( pos+shadowDir/4, shadowDir );&#xa;&#x9;float shadowCoef = softShadow( shadowRay, length(posLight - pos), 8 );&#xa;&#x9;// Couleur de sortie&#xa;&#x9;return shadowCoef * res;&#xa;}&#xa;&#xa;vec3 color_trace( Ray ray, Cam c  ){&#xa;&#x9;float c_refl = 0.4;&#xa;&#x9;vec3 accum = vec3(0,0,0);&#xa;&#x9;vec3 mask = vec3(1,1,1);&#xa;&#x9;vec3 pos, color;&#xa;&#x9;for( int i = 0; i &lt;50; i++){&#xa;&#x9;&#x9;float t = computeIntersection( ray, d_max );&#xa;&#x9;&#x9;if ( t != -1 ) {&#xa;&#x9;&#x9;&#x9;pos = ray.ro + (t * ray.rd);&#xa;&#x9;&#x9;&#x9;if ( distanceField( pos ) &lt; 0 ) {&#xa;&#x9;&#x9;&#x9;&#x9;return vec3(1, 0, 0);&#xa;&#x9;&#x9;&#x9;}&#xa;&#x9;&#x9;&#x9;color = directIllumination(pos , c);&#xa;&#x9;&#x9;&#x9;accum = accum + (mask * color);&#xa;&#x9;&#x9;&#x9;mask = c_refl * mask;&#xa;&#x9;&#x9;&#x9;ray = Ray(pos, reflect(ray.rd, computeNormale(pos) ) );&#xa;&#x9;&#x9;} else {&#xa;&#x9;&#x9;&#x9;return accum;&#xa;&#x9;&#x9;}&#xa;&#x9;}&#xa;&#x9;return accum;&#xa;}&#xa;&#xa;void main() {&#xa;&#x9;//// camera ////&#xa;&#x9;float xCam = module * cos(azimut) * cos(elevation);&#xa;&#x9;float yCam = module * sin(azimut) * cos(elevation);&#xa;&#x9;float zCam = module * sin(elevation);&#xa;&#x9;vec3 up = normalize ( vec3(0,0,1) );&#xa;&#x9;vec3 view = normalize ( -vec3(xCam,yCam,zCam) );&#xa;&#x9;vec3 right = normalize ( cross(view, up) );&#xa;&#x9;up = normalize ( cross(right, view) );&#xa;&#x9;Base3D b = Base3D(right, up, view);&#xa;&#x9;Cam c = Cam( vec3(xCam, yCam, zCam), b, PI/2, 4.0/4.0);&#xa;&#x9;&#xa;&#x9;//// Ray tracing ////&#xa;&#x9;float D = 1.0 / tan( c.angle/2.0 );&#xa;&#x9;vec2 normalCoord = ( 2.0 * (gl_FragCoord.xy / vec2(512.0, 512.0)) ) - 1;&#x9;// Coordonnees du pixel entre [-1 1]x[-1 1]&#xa;&#x9;vec3 dr = normalize( (normalCoord.x * b.right) + ((c.ratio * normalCoord.y) * b.up) + (D * b.view) );&#xa;&#x9;Ray ray =  Ray ( c.ro, dr );&#xa;&#xa;&#x9;vec3 color = backColor;&#xa;&#x9;float t = computeIntersection( ray, d_max );&#xa;&#x9;if (t != -1) {&#xa;&#x9;&#x9;vec3 pos = ray.ro + ( t * ray.rd );&#xa;&#x9;&#x9;if ( distanceField(pos) &lt; 0) {&#xa;&#x9;&#x9;&#x9;color = vec3(0,1,0);&#xa;&#x9;&#x9;} else {&#xa;&#x9;&#x9;&#x9;color = color_trace(ray, c);&#xa;&#x9;&#x9;&#x9;//color = directIllumination( pos, c );&#xa;&#x9;&#x9;}&#xa;&#x9;&#x9;//color = renderDepth( t );&#xa;&#x9;&#x9;//color = renderNormale( pos );&#xa;&#x9;&#x9;//color = renderShadow( pos );&#xa;&#x9;&#x9;//color = directIllumination(pos, c);&#xa;&#x9;&#x9;//color = color_trace(ray, c);&#xa;&#x9;}&#xa;&#xa;&#x9;outBuffer0 = vec4(color, 1);&#xa;}&#xa;"/>
     <string name="genericTessCHead" val="#version 420&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform vec2 mouse;&#xa;uniform float module;&#xa;uniform float azimut;&#xa;uniform float elevation;&#xa;uniform float xLight;&#xa;uniform float yLight;&#xa;uniform float zLight;&#xa;"/>
     <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
     <string name="genericTessEHead" val="#version 420&#xa;&#xa;uniform vec2 mouse;&#xa;uniform float module;&#xa;uniform float azimut;&#xa;uniform float elevation;&#xa;uniform float xLight;&#xa;uniform float yLight;&#xa;uniform float zLight;&#xa;"/>
     <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
     <string name="genericGeomHead" val="#version 420&#xa;&#xa;layout(triangles) in;&#xa;uniform vec2 mouse;&#xa;uniform float module;&#xa;uniform float azimut;&#xa;uniform float elevation;&#xa;uniform float xLight;&#xa;uniform float yLight;&#xa;uniform float zLight;&#xa;"/>
     <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
     <vector2f name="genericTSize">
      <float name="0" val="1"/>
      <float name="1" val="1"/>
     </vector2f>
     <vector2f name="genericTOffset">
      <float name="0" val="512"/>
      <float name="1" val="512"/>
     </vector2f>
     <bool name="genericNeedMouse" val="1"/>
     <bool name="genericNeedKeyboard" val="0"/>
     <uint name="genericNbWidgets" val="6"/>
     <int name="genericWidgetType-0" val="0"/>
     <int name="genericWidgetView-0" val="1"/>
     <string name="genericWidgetName-0" val="module"/>
     <bool name="genericWidgetKeyframed-0" val="0"/>
     <int name="genericWidgetType-1" val="0"/>
     <int name="genericWidgetView-1" val="1"/>
     <string name="genericWidgetName-1" val="azimut"/>
     <bool name="genericWidgetKeyframed-1" val="0"/>
     <int name="genericWidgetType-2" val="0"/>
     <int name="genericWidgetView-2" val="1"/>
     <string name="genericWidgetName-2" val="elevation"/>
     <bool name="genericWidgetKeyframed-2" val="0"/>
     <int name="genericWidgetType-3" val="0"/>
     <int name="genericWidgetView-3" val="1"/>
     <string name="genericWidgetName-3" val="xLight"/>
     <bool name="genericWidgetKeyframed-3" val="0"/>
     <int name="genericWidgetType-4" val="0"/>
     <int name="genericWidgetView-4" val="1"/>
     <string name="genericWidgetName-4" val="yLight"/>
     <bool name="genericWidgetKeyframed-4" val="0"/>
     <int name="genericWidgetType-5" val="0"/>
     <int name="genericWidgetView-5" val="1"/>
     <string name="genericWidgetName-5" val="zLight"/>
     <bool name="genericWidgetKeyframed-5" val="0"/>
    </IOData>
    <IOData name="nodeWidget-0">
     <uint name="nbChildren" val="7"/>
     <IOData name="childWidget-0">
      <bool name="vector2iAttribKeyframed" val="1"/>
      <vector2i name="vector2iAttribMinVal">
       <int name="0" val="-10000"/>
       <int name="1" val="-10000"/>
      </vector2i>
      <vector2i name="vector2iAttribMaxVal">
       <int name="0" val="10000"/>
       <int name="1" val="10000"/>
      </vector2i>
      <IOData name="vector2iAttribCurve">
       <vector2i name="currentVal">
        <int name="0" val="0"/>
        <int name="1" val="0"/>
       </vector2i>
       <uint name="nbCurves" val="2"/>
       <IOData name="curve-0">
        <int name="interpType" val="0"/>
        <int name="leftType" val="0"/>
        <int name="rightType" val="0"/>
        <IOData name="interpolator">
         <uint name="nbPoints" val="1"/>
         <uint name="nbTangents" val="0"/>
         <vector2f name="controlPoint-0">
          <float name="0" val="0"/>
          <float name="1" val="0"/>
         </vector2f>
        </IOData>
       </IOData>
       <IOData name="curve-1">
        <int name="interpType" val="0"/>
        <int name="leftType" val="0"/>
        <int name="rightType" val="0"/>
        <IOData name="interpolator">
         <uint name="nbPoints" val="1"/>
         <uint name="nbTangents" val="0"/>
         <vector2f name="controlPoint-0">
          <float name="0" val="0"/>
          <float name="1" val="0"/>
         </vector2f>
        </IOData>
       </IOData>
      </IOData>
      <uint name="nbChildren" val="0"/>
     </IOData>
     <IOData name="childWidget-1">
      <bool name="floatAttribKeyframed" val="0"/>
      <float name="floatAttribMinVal" val="0.1"/>
      <float name="floatAttribMaxVal" val="30"/>
      <IOData name="floatAttribCurve">
       <float name="currentVal" val="15.3789"/>
       <uint name="nbCurves" val="1"/>
       <IOData name="curve-0">
        <int name="interpType" val="0"/>
        <int name="leftType" val="0"/>
        <int name="rightType" val="0"/>
        <IOData name="interpolator">
         <uint name="nbPoints" val="1"/>
         <uint name="nbTangents" val="0"/>
         <vector2f name="controlPoint-0">
          <float name="0" val="0"/>
          <float name="1" val="15.3789"/>
         </vector2f>
        </IOData>
       </IOData>
      </IOData>
      <uint name="nbChildren" val="0"/>
     </IOData>
     <IOData name="childWidget-2">
      <bool name="floatAttribKeyframed" val="0"/>
      <float name="floatAttribMinVal" val="0"/>
      <float name="floatAttribMaxVal" val="6.28319"/>
      <IOData name="floatAttribCurve">
       <float name="currentVal" val="0"/>
       <uint name="nbCurves" val="1"/>
       <IOData name="curve-0">
        <int name="interpType" val="0"/>
        <int name="leftType" val="0"/>
        <int name="rightType" val="0"/>
        <IOData name="interpolator">
         <uint name="nbPoints" val="1"/>
         <uint name="nbTangents" val="0"/>
         <vector2f name="controlPoint-0">
          <float name="0" val="0"/>
          <float name="1" val="0"/>
         </vector2f>
        </IOData>
       </IOData>
      </IOData>
      <uint name="nbChildren" val="0"/>
     </IOData>
     <IOData name="childWidget-3">
      <bool name="floatAttribKeyframed" val="0"/>
      <float name="floatAttribMinVal" val="0.1"/>
      <float name="floatAttribMaxVal" val="1.4708"/>
      <IOData name="floatAttribCurve">
       <float name="currentVal" val="0.657916"/>
       <uint name="nbCurves" val="1"/>
       <IOData name="curve-0">
        <int name="interpType" val="0"/>
        <int name="leftType" val="0"/>
        <int name="rightType" val="0"/>
        <IOData name="interpolator">
         <uint name="nbPoints" val="1"/>
         <uint name="nbTangents" val="0"/>
         <vector2f name="controlPoint-0">
          <float name="0" val="0"/>
          <float name="1" val="0.657916"/>
         </vector2f>
        </IOData>
       </IOData>
      </IOData>
      <uint name="nbChildren" val="0"/>
     </IOData>
     <IOData name="childWidget-4">
      <bool name="floatAttribKeyframed" val="0"/>
      <float name="floatAttribMinVal" val="-10"/>
      <float name="floatAttribMaxVal" val="10"/>
      <IOData name="floatAttribCurve">
       <float name="currentVal" val="0.16"/>
       <uint name="nbCurves" val="1"/>
       <IOData name="curve-0">
        <int name="interpType" val="0"/>
        <int name="leftType" val="0"/>
        <int name="rightType" val="0"/>
        <IOData name="interpolator">
         <uint name="nbPoints" val="1"/>
         <uint name="nbTangents" val="0"/>
         <vector2f name="controlPoint-0">
          <float name="0" val="0"/>
          <float name="1" val="0.16"/>
         </vector2f>
        </IOData>
       </IOData>
      </IOData>
      <uint name="nbChildren" val="0"/>
     </IOData>
     <IOData name="childWidget-5">
      <bool name="floatAttribKeyframed" val="0"/>
      <float name="floatAttribMinVal" val="-10"/>
      <float name="floatAttribMaxVal" val="10"/>
      <IOData name="floatAttribCurve">
       <float name="currentVal" val="0.1"/>
       <uint name="nbCurves" val="1"/>
       <IOData name="curve-0">
        <int name="interpType" val="0"/>
        <int name="leftType" val="0"/>
        <int name="rightType" val="0"/>
        <IOData name="interpolator">
         <uint name="nbPoints" val="1"/>
         <uint name="nbTangents" val="0"/>
         <vector2f name="controlPoint-0">
          <float name="0" val="0"/>
          <float name="1" val="0.1"/>
         </vector2f>
        </IOData>
       </IOData>
      </IOData>
      <uint name="nbChildren" val="0"/>
     </IOData>
     <IOData name="childWidget-6">
      <bool name="floatAttribKeyframed" val="0"/>
      <float name="floatAttribMinVal" val="0.0001"/>
      <float name="floatAttribMaxVal" val="10"/>
      <IOData name="floatAttribCurve">
       <float name="currentVal" val="7.32003"/>
       <uint name="nbCurves" val="1"/>
       <IOData name="curve-0">
        <int name="interpType" val="0"/>
        <int name="leftType" val="0"/>
        <int name="rightType" val="0"/>
        <IOData name="interpolator">
         <uint name="nbPoints" val="1"/>
         <uint name="nbTangents" val="0"/>
         <vector2f name="controlPoint-0">
          <float name="0" val="0"/>
          <float name="1" val="7.32003"/>
         </vector2f>
        </IOData>
       </IOData>
      </IOData>
      <uint name="nbChildren" val="0"/>
     </IOData>
    </IOData>
    <vector2f name="nodeOutputPos-0-0">
     <float name="0" val="56.32"/>
     <float name="1" val="28.16"/>
    </vector2f>
   </IOData>
   <float name="scale" val="1.20151"/>
   <vector2f name="offset">
    <float name="0" val="316.318"/>
    <float name="1" val="111.889"/>
   </vector2f>
   <IOData name="animation">
    <uint name="firstFrame" val="0"/>
    <uint name="lastFrame" val="99"/>
    <uint name="currentFrame" val="0"/>
    <uint name="fps" val="24"/>
   </IOData>
  </IOData>
  <IOData name="animationWidget">
   <vector2i name="animationWidgetSize">
    <int name="0" val="1920"/>
    <int name="1" val="274"/>
   </vector2i>
   <IOData name="timelineWidget"/>
  </IOData>
  <IOData name="nodeListWidget"/>
  <IOData name="interactionWidget">
   <float name="scale" val="2.23002"/>
   <vector2f name="offset">
    <float name="0" val="242.517"/>
    <float name="1" val="235.371"/>
   </vector2f>
  </IOData>
  <IOData name="nodeInterfaceWidget"/>
 </IOData>
</Gratin>
