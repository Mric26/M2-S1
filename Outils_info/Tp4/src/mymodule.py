# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mymodule', [dirname(__file__)])
        except ImportError:
            import _mymodule
            return _mymodule
        if fp is not None:
            try:
                _mod = imp.load_module('_mymodule', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _mymodule = swig_import_helper()
    del swig_import_helper
else:
    import _mymodule
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


VERSION = _mymodule.VERSION

def pi():
  return _mymodule.pi()
pi = _mymodule.pi

def add_pi(*args):
  return _mymodule.add_pi(*args)
add_pi = _mymodule.add_pi

def set_log(*args):
  return _mymodule.set_log(*args)
set_log = _mymodule.set_log

def stats():
  return _mymodule.stats()
stats = _mymodule.stats

def Vecteur_create(*args):
  return _mymodule.Vecteur_create(*args)
Vecteur_create = _mymodule.Vecteur_create

def Vecteur_add(*args):
  return _mymodule.Vecteur_add(*args)
Vecteur_add = _mymodule.Vecteur_add

def Vecteur_elem(*args):
  return _mymodule.Vecteur_elem(*args)
Vecteur_elem = _mymodule.Vecteur_elem

def Vecteur_str(*args):
  return _mymodule.Vecteur_str(*args)
Vecteur_str = _mymodule.Vecteur_str

def Vecteur_destroy(*args):
  return _mymodule.Vecteur_destroy(*args)
Vecteur_destroy = _mymodule.Vecteur_destroy
# This file is compatible with both classic and new-style classes.

cvar = _mymodule.cvar
PI = cvar.PI

